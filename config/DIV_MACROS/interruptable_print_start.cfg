###
### Written by MikeYankeeOscarBeta (Discord: MikeyMike V2.5796)
### inspiration from: https://github.com/garethky/klipper-voron2.4-config/blob/7aa8b825f98578b08ad626273a82add0edca2326/printer_data/config/heatsoak.cfg
###



### What is it?
### It's an interruptable PRINT_START macro, so you don't have to "EMERGENCY STOP" if you want to cancel your heatsoak
### As of now there's only 3 stages, heating bed, heatsoak, then pre-heat nozzle (i use this with voron tap)



### How does it work?
### It works by pausing the print and then  triggering a recursive delayed_gcode loop, it avoid using any blocking gcode commands.
### The loop gets a time interval for when to check (total_time_elapsed), default is 10 seconds.



### How do I use this?
### (NB! these instructions might not be in sync with the latest featuresnot fully updated, reference printer.cfg if you find anything missing here)
### 1 - include interruptable_print_start.cfg in your config

### 2 - add the 'INTERRUPTABLE_PRINT_START' to your printer config, modify as needed, note the DURATION for each stage..
# # [gcode_macro INTERRUPTABLE_PRINT_START]
# # gcode:
# #     ## pause if printing just started, or we're not not already paused
# #     # {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
# #     # {% if is_print_active or printer['pause_resume'].is_paused|int == 0 %} 
# #     #    PAUSE 
# #     # {% endif %}
# #     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
# #     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
# #     {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
# #     {% set PROBE_TEMP = params.PROBE_TEMP|default(0)|float %}
# #     {% set MATERIAL_TYPE = params.MATERIAL_TYPE|default('ABS')|string %}
# #     {% set INITIAL_TOOL = params.TOOL|default(0)|int %}
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: EXTRUDER_TEMP=%s" % ( EXTRUDER_TEMP | float ) ) }
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: BED_TEMP=%s" % ( BED_TEMP | float ) )   }
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: CHAMBER_TEMP=%s" % ( CHAMBER_TEMP | float ) ) }
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: PROBE_TEMP=%s" % ( PROBE_TEMP | float ) ) }
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: MATERIAL_TYPE=%s" % ( MATERIAL_TYPE | string ) ) }
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: INITIAL_TOOL=%s" % ( INITIAL_TOOL | int ) ) }
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=hotend_temperature VALUE={EXTRUDER_TEMP}
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=bed_temperature VALUE={BED_TEMP}
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=chamber_temperature VALUE={CHAMBER_TEMP}
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=probe_temperature VALUE={PROBE_TEMP}
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=material_type VALUE='"{MATERIAL_TYPE}"'
# #     SET_GCODE_VARIABLE MACRO=global_variables VARIABLE=initial_tool VALUE={INITIAL_TOOL}
# #     INITIALIZE_TOOLCHANGER
# #     STOP_TOOL_PROBE_CRASH_DETECTION # Initialization starts this if printing, cancel it.  
# #     CLEAR_PAUSE
# #     M117 IntruptblStart
# #     PLAY_SOUND_PRE_PRINT
# #     VEFACH_ON S={CHAMBER_TEMP}
# #     DO_HOME_XY_IF_NOT_ALREADY

# #     ## start interruptable print start macro
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: starting"  )   }
# #     INTERRUPTABLE_PRINT_START_MAIN DEBUG=0 QUICK_HEATSOAK=1 STAGE1_DURATION=1200 STAGE1_BED_TEMPERATURE={BED_TEMP} STAGE2_DURATION=3600 STAGE2_CHAMBER_TEMPERATURE={CHAMBER_TEMP} STAGE3_DURATION=180 STAGE3_HOTEND_TEMPERATURE={PROBE_TEMP} FINISHED_BED_TEMPERATURE={BED_TEMP} FINISHED_CHAMBER_TEMPERATURE={CHAMBER_TEMP} FINISHED_HOTEND_TEMPERATURE={EXTRUDER_TEMP}
# #     { action_respond_info( "INTERRUPTABLE_PRINT_START: done"  )   }



### 3 - add the override for 'CANCEL_PRINT' to your printer config, modify as needed
###
### [gcode_macro CANCEL_PRINT]
### rename_existing: BASE_CANCEL_PRINT
### gcode:
###     INTERRUPTABLE_PRINT_START_CANCEL
###     SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
###     CLEAR_PAUSE
###     SDCARD_RESET_FILE
###     PRINT_END
###     BASE_CANCEL_PRINT
###

### 4 - modify the different stages 'INTERRUPTABLE_PRINT_START_STAGE#' as needed.

### 5 - inside the INTERRUPTABLE_PRINT_START_RECURSIVE_LOOP macro, change your PRINT_START command to reflect your existing print start. Mine is set up to avoid re-homing anything that's already homed.

### 6 - change the start gcode in your slicer to call INTERRUPTABLE_PRINT_START and immediately after call PAUSE, e.x for cura:
###
###    INTERRUPTABLE_PRINT_START BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} CHAMBER_TEMP={build_volume_temperature} MATERIAL_TYPE={material_type} PROBE_TEMP={material_bed_temperature_layer_0} TOOL={initial_extruder_nr}
###    PAUSE
###    G4 P1000


### 7 - When you're waiting for the print_start macro and want to cancel, you can call INTERRUPTABLE_PRINT_START_CANCEL from your console to cancel.
### 7.1 - In mainsail you can add the macro as a button to your UI via:
###       -> Interface Settings -> MACROS -> Change 'Management' to 'Expert' -> ADD GROUP -> Name your macro group -> add INTERRUPTABLE_PRINT_START_CANCEL to the macro group
### 7.2 - add the interrupable print start cancel button to your mainsail dashboard via:
###       -> Interface Settings -> DASHBOARD -> drag and move the macro group where you want it.
###       I suggest having the button right below 'Status' so it's accessible (NB! you might have to modify the DASHBOARD for all device types) (NBB! Using the 'Cancel' button in most Klipper GUIs seem to call the default CANCEL, which might not stop the interruptable print start loop)


### TODO:
### - replace all console output with:
###    {% set msg ="INTERRUPTABLE_PRINT_START - STAGE2 - target_chamber_temperature=" + stage2_chamber_temperature|string + " current_chamber_temperature=" + printer["temperature_sensor chamber_temp"].temperature|string %}
###    RESPOND TYPE=echo MSG="{msg}"
###   or for error messages:
###    RESPOND TYPE=error MSG="{msg}"

### - make it easier to add stages
### - add more stages. (homing, bed mesh, purge, etc).
### - Figure out how to avoid having PAUSE in the slicer start gcode.
### - Fix minor annoyance where toolhead returns to start position between PRINT_START and the actual print (because the start  position is saved due to PAUSEing before starting the print).
### - figure out a better, more generic way to call PRINT_START. (move it to it's own macro for readability?)
### - improve readability, make it easier to understand.
### - maybe add callbacks.
### - 



[gcode_macro INTERRUPTABLE_PRINT_START_MAIN]
description: main interruptable print start macro called to trigger the delayed gcode loop, it also holds any variables used in the macros
variable_stage: None ## None -> stage1(heat bed) -> stage2(heatsoak) -> stage3(heat hotend) -> (cancel) -> done

variable_debug: False
variable_check_interval: 10 ## time between loops in seconds, reduce to save a few seconds of idle times between stages.

## variables to pass to PRINT_START when INTERRUPTABLE_PRINT_START is finished
variable_finished_bed_temperature: 0
variable_finished_chamber_temperature: 0
variable_finished_hotend_temperature: 0
variable_quick_heatsoak: 0

variable_total_time_elapsed: 0

gcode:
    ## attemptint to pause here, but geting less than ideal results so far, still have to PAUSE right after calling INTERRUPTABLE_PRINT_START in slicer "start"/"before print"/"first" gcode.
    ## pause if printing just started, or we're not not already paused
    # {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    # {% if is_print_active or printer['pause_resume'].is_paused|int == 0 %}
    #     PAUSE
    # {% endif %}

    ## debug - get params
    {% set DEBUG = (params.DEBUG | default(0) | int) %} ## enable or disable debug console output, it's an int since there is no bool. 0 is false, everything else is true
    ## debug - set variables
    {% if DEBUG != 0 %}
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=debug VALUE=True
    {% else %}
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=debug VALUE=False
    {% endif %}


    {% set QUICK_HEATSOAK = (params.QUICK_HEATSOAK | default(0) | int) %} ## enable or disable quick heatsoak (heatsoak to lower chambertemp then set a higher temp and start print)
    {% if QUICK_HEATSOAK != 0 %}
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=quick_heatsoak VALUE=True
    {% else %}
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=quick_heatsoak VALUE=False
    {% endif %}


    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN - started" ) if debug }

    ### printer parameter debug
    #{ action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN- debug1 : chamber_temp=%d" % (printer["temperature_sensor chamber_temp"].temperature) ) }
    
    
    
    
    ###
    ### get and set VARIABLES to PARAMETER values
    ###

    ## stage1 - get params
    {% set STAGE1_DURATION = (params.STAGE1_DURATION | default(0) | int) %} ## duration in seconds
    {% set STAGE1_BED_TEMPERATURE = (params.STAGE1_BED_TEMPERATURE | default(0) | int) %} ## temperature of bed in degC
    ## stage1 - write parameters to log
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE1_DURATION=%s" % ( STAGE1_DURATION | int ) )   }
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE1_BED=%s" % ( STAGE1_BED_TEMPERATURE | float ) )   }
    ## stage1 - set variables
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_time_remaining VALUE={ STAGE1_DURATION }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_bed_temperature VALUE={ STAGE1_BED_TEMPERATURE }


    ## stage2 - get params
    {% set STAGE2_DURATION = (params.STAGE2_DURATION | default(0) | int) %} ## duration in seconds    
    {% set STAGE2_CHAMBER_TEMPERATURE = (params.STAGE2_CHAMBER_TEMPERATURE | default(0) | float) %} ## temperature of chamber in degC
    {% if QUICK_HEATSOAK != 0 %}  ## if quick_heatsoak == True then set stage2 chamber temp target to 80% of finished chamber temperature target
        {% set STAGE2_CHAMBER_TEMPERATURE = ( STAGE2_CHAMBER_TEMPERATURE * 0.8 ) %} ## reduce heatsoak target chamber temperature by 20%
        { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: QUICK_HEATSOAK is ENABLED") if debug } 
    {% endif %}
    ## stage2 - write parameters to log
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE2_DURATION=%s" % ( STAGE2_DURATION | int ) )   }
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: QUICK_HEATSOAK=%s" % ( QUICK_HEATSOAK | int ) ) }
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE2_CHAMBER=%s" % ( STAGE2_CHAMBER_TEMPERATURE | float ) )   }    
    ## stage2 - set variables
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_time_remaining VALUE={ STAGE2_DURATION }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_chamber_temperature VALUE={ STAGE2_CHAMBER_TEMPERATURE }


    ## stage3 - get params
    {% set STAGE3_DURATION = (params.STAGE3_DURATION | default(0) | int) %} ## duration in seconds
    {% set STAGE3_HOTEND_TEMPERATURE = (params.STAGE3_HOTEND_TEMPERATURE | default(0) | float) %} ## temperature of hotend in degC
    ## stage3 - write parameters to log
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE3_DURATION=%s" % ( STAGE3_DURATION | int ) )   }
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: STAGE3_HOTEND=%s" % ( STAGE3_HOTEND_TEMPERATURE | float ) )   }
    ## stage3 - set variables
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_time_remaining VALUE={ STAGE3_DURATION }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_hotend_temperature VALUE={ STAGE3_HOTEND_TEMPERATURE }



    ## finished - get params
    {% set FINISHED_BED_TEMPERATURE = (params.FINISHED_BED_TEMPERATURE | default(0) | int) %} ## bed temperature to pass to PRINT_START
    {% set FINISHED_CHAMBER_TEMPERATURE = (params.FINISHED_CHAMBER_TEMPERATURE | default(0) | int) %} ## chamber temperature to pass to PRINT_START
    {% set FINISHED_HOTEND_TEMPERATURE = (params.FINISHED_HOTEND_TEMPERATURE | default(0) | int) %} ## hotend temperature to pass to PRINT_START        
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: FINISHED_BED=%s" % ( FINISHED_BED_TEMPERATURE | float ) )   }
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: FINISHED_CHAMBER=%s" % ( FINISHED_CHAMBER_TEMPERATURE | float ) )   }    
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN: FINISHED_HOTEND=%s" % ( FINISHED_HOTEND_TEMPERATURE | float ) )   }
    ## finished - set variables
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=finished_chamber_temperature VALUE={ FINISHED_CHAMBER_TEMPERATURE }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=finished_bed_temperature VALUE={ FINISHED_BED_TEMPERATURE }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=finished_hotend_temperature VALUE={ FINISHED_HOTEND_TEMPERATURE }


    ## set the stage
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'stage1'"
    ## set total runtime
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=total_time_elapsed VALUE=0

    ## start recursive loop
    UPDATE_DELAYED_GCODE ID=INTERRUPTABLE_PRINT_START_RECURSIVE_LOOP DURATION=0.00001 ## start immediately (setting it to 0 will cancels delayed_gcode for some reason, kinda dumb. a "STOP=1" or something would make more sense right? go complain to klipper devs about it)
    { action_respond_info( "INTERRUPTABLE_PRINT_START_MAIN - DEBUG - Main completed" ) if debug }


[delayed_gcode INTERRUPTABLE_PRINT_START_RECURSIVE_LOOP]
gcode:
    {% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP" ) if interruptable_macro_main.debug }

    ## update total time elapsed
    {% set total_time_elapsed = interruptable_macro_main.total_time_elapsed + interruptable_macro_main.check_interval %}
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    ### run all stage macros in order
    ## TODO: replace stage string with an int and increment current stage instead?

    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - stage1_complete=%d" % (printer['gcode_macro INTERRUPTABLE_PRINT_START_STAGE1'].stage1_complete) ) if interruptable_macro_main.debug }
    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - stage2_complete=%d" % (printer['gcode_macro INTERRUPTABLE_PRINT_START_STAGE2'].stage2_complete) ) if interruptable_macro_main.debug }
    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - stage3_complete=%d" % (printer['gcode_macro INTERRUPTABLE_PRINT_START_STAGE2'].stage2_complete) ) if interruptable_macro_main.debug }

    {% if interruptable_macro_main.stage == "stage1" %}
       INTERRUPTABLE_PRINT_START_STAGE1
    {% elif interruptable_macro_main.stage == "stage2" %}
       INTERRUPTABLE_PRINT_START_STAGE2 
    {% elif interruptable_macro_main.stage == "stage3" %}
       INTERRUPTABLE_PRINT_START_STAGE3
    {% endif %}


    ##get stage
    {% set stage = interruptable_macro_main.stage %}
    #SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'{ stage }'" # can have the update twice in one "interval" for some reason.. not sure why..
    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
	    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'done'"
	    { action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug2 - current stage: %s" % (stage) ) if interruptable_macro_main.debug }
	    
	    
            { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - cancelled after ~%d seconds" | format(total_time_elapsed) ) if interruptable_macro_main.debug }
	    
            # macro was cancelled -- abort
	    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - Aborted!" ) }

	    { action_respond_info( "INTERRUPTABLE_PRINT_START - Time Spent" ) }
	    PRINT_CONVERT_SECONDS_TO_HH_MM_SS S={total_time_elapsed}

	    INTERRUPTABLE_PRINT_START_ABORT ## trigger abort macro
                # {% if is_print_active %}
		#    CANCEL_PRINT ## also cancel print
		# {% endif %}
	    
        {% else %}
            { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - debug3 - stage: else" ) if interruptable_macro_main.debug }
            { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - complete after %d seconds" | format(total_time_elapsed) ) if interruptable_macro_main.debug }

	    # final stage is complete. Call any finishing macros prior to starting the print
	    { action_respond_info( "INTERRUPTABLE_PRINT_START - RECURSIVE_LOOP - finished! in %d seconds" | format(total_time_elapsed) ) }

	    { action_respond_info( "INTERRUPTABLE_PRINT_START - Time Spent" ) }
	    PRINT_CONVERT_SECONDS_TO_HH_MM_SS S={total_time_elapsed}

	    { action_respond_info( "INTERRUPTABLE_PRINT_START - calling normal PRINT_START" ) }

	    ## if quick_heatsoak is True then set target chamber temperature to finished chamber temperature target
	    {% if interruptable_macro_main.quick_heatsoak %}
	        SET_CHAMBER_TEMP_TARGET S={interruptable_macro_main.finished_chamber_temperature}
	    {% endif %}

	    ### we're done, trigger macro to start the print, if paused or sdcard is active
	    #{% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
	    #{% if is_print_active or printer['pause_resume'].is_paused|int == 0 %}
	    #PRINT_START BED_TEMP={interruptable_macro_main.finished_bed_temperature} EXTRUDER_TEMP={interruptable_macro_main.finished_hotend_temperature} CHAMBER_TEMP={interruptable_macro_main.finished_chamber_temperature}
	    #{% endif %}
	    
	    ## resume print (because INTERRUPTABLE_PRINT_START pauses it to do it's thing)
	    ### NB! this might be causing infinite loop problems. moving it back to print_start. delete if that fixes it
	    {% if printer['pause_resume'].is_paused|int == 1 %}
    	    SAVE_GCODE_STATE NAME=PAUSE_STATE ## set current state to new pause state, to avoid returning to whichever position it was before it was paused
    	    RESUME
    	    {% endif %}
	    
        {% endif %}

        ## reset all stage vars, except stage, which may be queried via the api
	### TODO: replace with for loop and a an int for number of stages
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_time_remaining VALUE=0
	SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_complete VALUE=0

	SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_complete VALUE=0
	
	SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_time_remaining VALUE=0
	SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_complete VALUE=0
	
        SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=total_time_elapsed VALUE=0

    #{% else %}
    {% elif stage in ("stage1", "stage2", "stage3") %}
        ## trigger ourselves again - GOGO RECURSIVE MACRO
        UPDATE_DELAYED_GCODE ID=INTERRUPTABLE_PRINT_START_RECURSIVE_LOOP DURATION={ interruptable_macro_main.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1
    {% else %}
       ### not sure why this would ever happen. stage not set?
       ## dwell... just to have something here..
        G4 P1
    {% endif %}

[gcode_macro INTERRUPTABLE_PRINT_START_CANCEL]
description: cancels an in-progress macro
gcode:
    {% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
    { action_respond_info( "INTERRUPTABLE_PRINT_START - CANCEL - debug 1") if interruptable_macro_main.debug }
    SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=INTERRUPTABLE_PRINT_START_RECURSIVE_LOOP DURATION=0.00001 ## run "immediately"
    { action_respond_info( "INTERRUPTABLE_PRINT_START - CANCEL - cancel was triggered" ) if interruptable_macro_main.debug }


[gcode_macro INTERRUPTABLE_PRINT_START_SET_NEXT_STAGE]
description: sets stage to next stage in sequence
gcode:
	{% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
	{ action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug1" ) if interruptable_macro_main.debug }

	{% set stage = interruptable_macro_main.stage %}
	{ action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug2 - current stage: %s" % (stage) ) if interruptable_macro_main.debug }	

	## TODO: improve this to make it independent of the variable somehow.. attempted to do this with stage#_complete but nah..
	{% if stage == "stage3" %}
              {% set stage = "done" %}
	      { action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug2 - next stage: %s" % (stage) ) if interruptable_macro_main.debug }	
              SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'{ stage }'"
	      
	{% elif stage == "stage2" %}
              {% set stage = "stage3" %}
	      { action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug2 - next stage: %s" % (stage) ) if interruptable_macro_main.debug }	
              SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'{ stage }'"
	      
	{% elif stage == "stage1" %}
              {% set stage = "stage2" %}
              { action_respond_info( "INTERRUPTABLE_PRINT_START - SET_NEXT_STAGE - debug2 - next stage: %s" % (stage) ) if interruptable_macro_main.debug }	
              SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_MAIN VARIABLE=stage VALUE="'{ stage }'"
	      
        {% endif %}

###
### Actual Stage and Abort Macros
###
[gcode_macro INTERRUPTABLE_PRINT_START_FILTER_ON]
description: Aborts heatsoak, turns off all heaters, turn on nevermore
gcode:
	{% set interruptable_macro_stage2 = printer['gcode_macro INTERRUPTABLE_PRINT_START_STAGE2'] %}
	{% if interruptable_macro_stage2.stage2_chamber_temperature > 0.0 %}
	   FILTER_ON ## enable nevermore filter
	{% endif %}


[gcode_macro INTERRUPTABLE_PRINT_START_ABORT]
description: Aborts heatsoak, turns off all heaters, turn on nevermore
gcode:
	TURN_OFF_HEATERS
	INTERRUPTABLE_PRINT_START_FILTER_ON
	#{% if is_print_active %}
	#   CANCEL_PRINT ## also cancel print
	#{% endif %}
	#CANCEL_PRINT
	CLEAR_PAUSE
	
### STAGE1 - bed
[gcode_macro INTERRUPTABLE_PRINT_START_STAGE1]
description: stage1 of interruptable macro, heating bed
variable_stage1_time_remaining: 0
variable_stage1_bed_temperature: 0
variable_stage1_complete: 0
gcode:
	{% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
	#{ action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE1 - started target_bed_temperature={stage1_bed_temperature} current_bed_temperature={printer.heater_bed.temperature}" ) }
	#RESPOND MSG="INTERRUPTABLE_PRINT_START - STAGE1 - target_bed_temperature={stage1_bed_temperature} current_bed_temperature={printer.heater_bed.temperature}"
	#{% set msg ="INTERRUPTABLE_PRINT_START - STAGE1 - target_bed_temperature=" + stage1_bed_temperature|string + " current_bed_temperature=" + printer.heater_bed.temperature|string %}
	#RESPOND TYPE=echo MSG="{msg}"
	
 	{% if interruptable_macro_main.stage == "stage1" %}
	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE1 - debug2" ) if interruptable_macro_main.debug }
      	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE1 - debug3 - time remaining: %d" % (stage1_time_remaining) ) if interruptable_macro_main.debug }
	   ## update stage conditions
	   {% set stage1_time_remaining = stage1_time_remaining - interruptable_macro_main.check_interval  %} ## get stage counter
   	   SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_time_remaining VALUE={ stage1_time_remaining }

           ## stage action
	   { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE1 - Heating Bed") }
	   M117 Heating Bed
	   LED_MACROS_PRE_PRINT1
	   M140 S{stage1_bed_temperature} #setting bed to temperature
	   
	   ## conditions for stage completion
	   ### wait for timeout, or wait for bed temperature
	   {% if stage1_time_remaining <= 0 %} ## error conditions for stage1, time ran out
	      { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE1 - ERROR: heating bed took longer than the timeout, something is wrongshut down bed and cancel") }
	      INTERRUPTABLE_PRINT_START_CANCEL
	      
	   {% elif printer.heater_bed.temperature >= stage1_bed_temperature %}
	      ## bed is at temp, continue
	      { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE1 - completed" ) }
	      {% set stage1_complete = 1 %}
	      SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE1 VARIABLE=stage1_complete VALUE={ stage1_complete }
     	      INTERRUPTABLE_PRINT_START_SET_NEXT_STAGE
           {% endif %}
	   
        {% endif %}



### STAGE2 - chamber
[gcode_macro INTERRUPTABLE_PRINT_START_STAGE2]
description: stage2 of interruptable macro, wait for heatsoak
variable_stage2_time_remaining: 0
variable_stage2_chamber_temperature: 0
variable_stage2_complete: 0
gcode:
	{% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
	#RESPOND MSG="INTERRUPTABLE_PRINT_START - STAGE2 - target_chamber_temperature={stage2_chamber_temperature} current_chamber_temperature=" ~ printer["temperature_sensor chamber_temp"].temperature
	#{printer['gcode_macro CLR_LINE'].row_line|string + ", " + printer['gcode_macro SAVE_Z'].zavg|round(5)|string }
	#RESPOND MSG={}
	{% set msg ="INTERRUPTABLE_PRINT_START - STAGE2 - target_chamber_temperature=" + stage2_chamber_temperature|string + " current_chamber_temperature=" + printer["temperature_sensor chamber_temp"].temperature|string %}
	RESPOND TYPE=echo MSG="{msg}"
	
	{% if interruptable_macro_main.stage == "stage2" %}
	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE2 - debug1- target=%d current=%d" ) if interruptable_macro_main.debug }
	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE2 - debug1 - time remaining: %d" % (stage2_time_remaining) ) if interruptable_macro_main.debug }
	   ## update stage conditions
	   {% set stage2_time_remaining = stage2_time_remaining - interruptable_macro_main.check_interval  %}  ## get stage counter
	   SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_time_remaining VALUE={ stage2_time_remaining }

           ## stage action
   	   { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE2 - W8 4 Heatsoak") }
	   M117 W8 4 Heatsoak
	   LED_MACROS_PRE_PRINT2
	   INTERRUPTABLE_PRINT_START_FILTER_ON
	   #BED_FAN_ON S={stage2_chamber_temperature} ## turn on bed fans
	   #VEFACH_ON S={stage2_chamber_temperature}
	   SET_CHAMBER_TEMP_TARGET S={stage2_chamber_temperature}
	   
	   ## conditions for stage completion
	   ## wait for timeout, or wait for chamber temperature
	   {% if stage2_time_remaining <= 0 %}
	      { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE3 - ERROR: Chamber did not reach target temperature within set time") }
      	      INTERRUPTABLE_PRINT_START_CANCEL ## chamber not reaching temp within set time. abort
	      
	   {% elif printer["temperature_sensor chamber_temp"].temperature >= stage2_chamber_temperature %}
	      ## chamber is at temp, continue
	      INTERRUPTABLE_PRINT_START_FILTER_ON
	      { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE2 - completed" ) }
      	      {% set stage2_complete = 1 %}
      	      SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE2 VARIABLE=stage2_complete VALUE={ stage2_complete }
      	      INTERRUPTABLE_PRINT_START_SET_NEXT_STAGE
           {% endif %}
	   
        {% endif %}

### STAGE3 - hotend/hotend
[gcode_macro INTERRUPTABLE_PRINT_START_STAGE3]
description: stage3 of interruptable macro, pre-heat hotend to probe temperature
variable_stage3_time_remaining: 0
variable_stage3_hotend_temperature: 0
variable_stage3_complete: 0
gcode:
	{% set interruptable_macro_main = printer['gcode_macro INTERRUPTABLE_PRINT_START_MAIN'] %}
	#{ action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug1" ) if interruptable_macro_main.debug }
	{%set msg ="INTERRUPTABLE_PRINT_START - STAGE3 - target_hotend_temperature="+stage3_hotend_temperature|string + " current_hotend_temperature=" + printer[printer.toolhead.extruder].temperature|string  %}
	RESPOND TYPE=echo MSG="{msg}"
	
        {% set stage = interruptable_macro_main.stage %}
        { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug1 : stage=%s" % (interruptable_macro_main.stage) ) if interruptable_macro_main.debug }
        { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug1 : hotend_temperature=%d" % (stage3_hotend_temperature) ) if interruptable_macro_main.debug }
   	{ action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug1 : extruder.temperature=%d" % (printer[printer.toolhead.extruder].temperature) ) if interruptable_macro_main.debug }

	{% if stage == "stage3" %}
	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug2" ) if interruptable_macro_main.debug }
	   { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - debug2 - time remaining: %d" % (stage3_time_remaining) ) if interruptable_macro_main.debug }
	   ## update stage conditions
	   {% set stage3_time_remaining = stage3_time_remaining - interruptable_macro_main.check_interval  %}  ## get stage counter
   	   SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_time_remaining VALUE={ stage3_time_remaining }

           ## stage action
	   { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE3 - Heat2ProbeTemp") }
	   M117 Heat2ProbeTemp
	   LED_MACROS_PRE_PRINT3
   	   M104 S{stage3_hotend_temperature} ## heat hotend to tap probe temp
	   
	   ## conditions for stage completion
	   ## wait for timeout, or wait for nozzle/extruder/hotend temperature
	   {% if stage3_time_remaining <= 0 %}
	      { action_respond_info("INTERRUPTABLE_PRINT_START - STAGE3 - WARNING: Hotend did not reach target temperature within set time") }
	      ## hotend not reaching temp in target time. that's a problem. aborting!
	      INTERRUPTABLE_PRINT_START_CANCEL
	      
	   {% elif printer[printer.toolhead.extruder].temperature >= stage3_hotend_temperature %}
	      ## hotend is at temp, continue
              { action_respond_info( "INTERRUPTABLE_PRINT_START - STAGE3 - completed" ) if interruptable_macro_main.debug }
	      {% set stage3_complete = 1 %}
      	      SET_GCODE_VARIABLE MACRO=INTERRUPTABLE_PRINT_START_STAGE3 VARIABLE=stage3_complete VALUE={ stage3_complete }
	      INTERRUPTABLE_PRINT_START_SET_NEXT_STAGE
	   {% endif %}
	   
        {% endif %}